# custom-templates/my_client.mustache
"""DefectDojo Client"""

from {{packageName}}.api_client import ApiClient as _ApiClient
from {{packageName}}.configuration import Configuration
{{#apiInfo}}
{{#apis}}
from {{packageName}}.api.{{classVarName}} import {{classname}}
{{/apis}}
{{/apiInfo}}
from urllib.request import proxy_bypass, getproxies
from urllib.parse import urlparse

class DefectDojo:
    """API client for DefectDojo.

    :param base_url: base URL of the DefectDojo instance.
    :param token: API token to use with DefectDojo.
        Use this OR auth, not both.
    :param auth: tuple with username and password for basic authentication with DefectDojo.
        Use this OR token, not both.
    :param proxy: proxy required to connect to DefectDojo.
        Default (None) will use environment settings. Set to False to forcefully disable it.
    """

    def __init__(self, base_url: str, token: str = None, auth: tuple[str] = None, proxy=None):
        if token is not None and auth is not None:
            raise ValueError('Provide `token` OR `auth`, not both.')
        if auth is not None and (not isinstance(auth, tuple) or len(auth) != 2):
            raise ValueError('`auth` needs to be a tuple with 2 elements, username and password')

        # TODO: just python-requests as generator library...
        if proxy is None:
            scheme, host, *_ = urlparse(base_url)
            if not proxy_bypass(host):
                proxy = getproxies().get(scheme)

        # drop last / (if any) as it is already added as part of endpoints
        base_url = base_url.rstrip('/')

        if token is not None:
            self.config = Configuration(
                host=base_url, api_key={'tokenAuth': token}, api_key_prefix={'tokenAuth': 'Token'}
            )
        elif auth is not None:
            self.config = Configuration(host=base_url, username=auth[0], password=auth[1])
        else:
            self.config = Configuration(host=base_url)
        if proxy:  # exclude False or None
            self.config.proxy = proxy
        self.api_client = _ApiClient(configuration=self.config)
        {{#apiInfo}}
        {{#apis}}
        self.{{classVarName}} = {{classname}}(self.api_client)
        {{/apis}}
        {{/apiInfo}}
